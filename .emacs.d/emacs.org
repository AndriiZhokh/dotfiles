#+title Emacs From Scratch Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* Basic UI Configuration

#+begin_src emacs-lisp

  (scroll-bar-mode -1)                                       ; hide scroll bar
  (tool-bar-mode -1)                                         ; hide tool bar
  (tooltip-mode -1)                                          ; disable tooltips
  (electric-pair-mode 1)                                     ; auto close brackets
  (menu-bar-mode -1)                                         ; hide menu bar
  (global-hl-line-mode 1)                                    ; highlight current line
  (column-number-mode)                                       ; display column number in modeline
  (global-display-line-numbers-mode 1)                       ; display line numbers
  (set-fringe-mode 10)                                       ; vertical margins

  (setq display-line-numbers-type 'relative)                 ; display relative line numbers
  (setq inhibit-startup-message t)                           ; do not show default startup screen
  (setq visible-bell t)                                      ; set up visible bell
  (setq backup-directory-alist
        `(("." . ,(concat user-emacs-directory "backups")))) ; set back up directory to backup files

  (put 'dired-find-alternate-file 'disabled nil)

#+end_src

* Disable line numbers for some modes

#+begin_src emacs-lisp
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  treemacs-mode-hook
                  shell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

* Font Configuration

#+begin_src emacs-lisp

(set-face-attribute 'default nil :font "Cascadia Code" :height 110) ; set up font

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Cascadia Code" :height 120)

;;Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Arial" :height 130)

#+end_src

* Initialize package sources

#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-linux platforms
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Packages
** Command Log Mode
*global-command-log-mode* need to be enabled first
*clm/toggle-command-log-buffer* (C-c o) to display buffer that will show your current pressed keys and commands

#+begin_src emacs-lisp

(use-package command-log-mode)

#+end_src
** Ivy

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

#+end_src
** Counsel

#+begin_src emacs-lisp

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initialinputs-alist nil))

#+end_src
** All The Icons
  After first install run the (M-x) all-the-icons-install-fonts and select directory where do you want to install the font icons

#+begin_src emacs-lisp

  (use-package all-the-icons
    :if (display-graphic-p))

#+end_src
** Doom Modeline

#+begin_src emacs-lisp

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src
** Doom Themes

#+begin_src emacs-lisp

  (use-package doom-themes
    :init
    (load-theme 'doom-solarized-light t)
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t))

#+end_src
** Rainbow Delimiters

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
  
#+end_src
** Which Key

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

#+end_src
** Ivy Rich

#+begin_src emacs-lisp

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

#+end_src
** Helpful

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap-describe-key] . helpful-key))

#+end_src
** General

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-create-definer azh/leader-key
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (azh/leader-key
      "t"  '(:ignore t                     :which-key "toggles")
      "tt" '(counsel-load-theme            :which-key "choose theme")
      "ts" '(hydra-text-scale/body         :which-key "scale text")
      "tg" '(global-command-log-mode       :which-key "start global command log mode")
      "tc" '(clm/toggle-command-log-buffer :which-key "toggle command log buffer")

      "f"  '(:ignore f :which-key "file")
      "ff" '(find-file :which-key "find file")

      "b"  '(:ignore b             :which-key "buffer")
      "be" '(eval-buffer           :which-key "eval buffer")
      "bs" '(counsel-switch-buffer :which-key "switch to buffer")
      "bk" '(kill-this-buffer      :which-key "kill current buffer")))

#+end_src
** Evil

#+begin_src emacs-lisp

  ;; for some reason disables evil-mode on start
  (defun azh/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

#+end_src
** Evil Collection

#+begin_src emacs-lisp

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src
** Hydra

#+begin_src emacs-lisp

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

#+end_src
** Projectile

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

#+end_src
** Counsel Projectile

#+begin_src emacs-lisp

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src
** Magit

#+begin_src emacs-lisp

  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src
** Ord Mode

#+begin_src emacs-lisp

  (defun azh/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . azh/org-mode-setup)
    :config
    (setq org-ellipsis " ã„±"
          org-hide-emphasis-markers t)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/Notes/tasks.org"
            "~/Notes/birthdays.org"
            "~/Notes/habits.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
          '(("archive.org" :maxlevel . 1)
            ("tasks.org" :maxlevel . 1)))

    ;; Save Org buffer after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    ;; This doesn't work for some reason
    (setq org-tag-alist
          '((:startgroup)
            ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ;; Include tags with '+' exclude tags with '-'
            ("W" "Work Tasks" tags-todo "+work-email")

            ;;Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "RVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Canceled Projects")
                     (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/Notes/tasks.org" "Inbox")
             "* TODO %?\n %U\n %a\n %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/Notes/journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/Notes/journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/Notes/journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "~/Notes/metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj"))))

#+end_src

*** Org Bullets

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("â… " "â…¡" "â…¢" "â…£" "â…¤" "â…¥" "â…¦" "â…§" "â…¨" "â…©" "â…ª" "â…«")))

#+end_src
*** Org Headers Configuration

#+begin_src emacs-lisp

  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1))))

#+end_src
*** Visual Fill Column

#+begin_src emacs-lisp

  (defun azh/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :defer t
    :hook (org-mode . azh/org-mode-visual-fill))

#+end_src

*** Configure Babel Languages
#+begin_src emacs-lisp

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))

  (setq org-confirm-babel-evaluate nil)

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

*** Auto-tangle Configuration Files
#+begin_src emacs-lisp

;; Automatically tangle our Emacs.org config file when we save it
(defun azh/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/Notes/emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'azh/org-babel-tangle-config)))
#+end_src

* Structure Templates
#+begin_src emacs-lisp

  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src

* Commenting

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evil-comment-or-uncomment-lines))

#+end_src

* Languages

** Language Servers

#+begin_src emacs-lisp

  (defun azh/lsp-mode-setup ()
    (setq lsp-headerline-breadcrump-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrump-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . azh/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l") ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

#+end_src

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

- lsp-ui-doc-focus-frame
- lsp-ui-doc-unfocus-frame

- lsp-ui-peek-find-references

- *complete-at-point*: for completions
- Signatures when writing methods (*C-n, C-p* to cycle signatures)

- lsp-find-definition: C-c l g r
- lsp-finf-references: C-c l g g

- lsp-rename: C-c l r r

- flymake-show-diagnostics-buffer: to show diagnostic

- lsp-format-buffer: C-c l = =

*** LSP Treemacs

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

- lsp-treemacs-symbols

*** LSP Ivy

#+begin_src emacs-lisp

  (use-package lsp-ivy)

#+end_src

- lsp-ivy-workspace-symbol - search though the project

** Typescript

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

and also need to run command:
npm i -g typescript-language-server
and
npm i -g typescript
to use language server features

* Company Mode

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

#+end_src

#+begin_src emacs-lisp

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

* Keybindings
** Global

#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit) ; escape to quit prompts
  (global-set-key (kbd "C-M-j") 'counsel-switch-buffer)   ; switch to buffer

#+end_src
** Map Specific Mode

#+begin_src emacs-lisp

  (define-key emacs-lisp-mode-map (kbd "C-x M-t") 'counsel-load-theme) ; load custom theme

#+end_src

* Commands
- org-babel-tangle

C-h f --- describe function
C-h v --- describe variable
C-x C-f - find file
C-c o --- toggle command log buffer
C-x C-e - execute (eval) current specific block (not entire buffer)
when M-x is started type M-o on some function and you can see additional options that you can choose

* TODOs
** TODO Start Emacs in home directory
** TODO font ligatures support
** TODO do not open new dired buffer every time when navigating through folders
** TODO syntax check for English and Ukrainian languages
** TODO Do not wrap lines
** TODO transperancy
** TODO switch between separated windows and close that separated windows
** TODO write bash script that will synchronize current config with dotfile repo folder
** TODO markdown mode
** TODO yaml mode
